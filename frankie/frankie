#!/store/anaconda/anaconda/bin/python3.5

import os
import re
import sys
import fire
import requests
import pandas as pd
import pkg_resources
from pathlib import Path

from frankie import transformations


template = """
{
  "frankie_config_version": 0.1,
  "website": "http://your.website.here/",
  "pipelines": [
      {
        "name": "default",
        "intercept": "^/$",
        "edits": [
           {
             "name": "HelloWorld",
             "type": "simple",
             "find": "World",
             "replace": "Frankie"
           }
        ]
      }
  ]
}
    
"""


def _load_module(source_file):
    import importlib
    import importlib.machinery
    import importlib.util

    loader = importlib.machinery.SourceFileLoader("x", source_file)
    spec = importlib.util.spec_from_loader(loader.name, loader)
    mod = importlib.util.module_from_spec(spec)
    loader.exec_module(mod)
    try:
        transform_function = getattr(mod, 'transform')
    except AttributeError as err:
        print('transform function not found in ' + source_file + ', skipping.')
        return None

    return transform_function

def _fix_absolute_links(base_url, frankie_url, doc):
    doc = re.sub(base_url, '//' + frankie_url, doc)

    return doc


def _loadPipelines(config_file, filename):
    if 'pipelines' not in config_file:
       print('no pipelines found in ' + filename)
       return
    
    result = {}

    for pipeline in config_file['pipelines']:
        result[pipeline['name']] = pipeline

    return result

def run(config = 'config.js'):
    import json
    import requests
    from flask import Flask, request, Response
    
    proxy = Flask(__name__)

    path = os.path.dirname(os.path.realpath(__file__) + '/lib')

    path = re.sub('/scripts/frankie', '', path)

    libpath = pkg_resources.resource_filename('frankie', 'lib/')

    for dirName, subdirList, fileList in os.walk(libpath):
        for f in fileList:
            if f.endswith('.py') and '__init__' not in f:
               transform_function = _load_module(dirName + '/' + f)


    try:
        with open(config) as f:
            config_file = json.loads(f.read())
    except FileNotFoundError as e:
        print('Unable to find \'' + config + '\'.')
        print('Please specify config file using --config') 
        sys.exit(-1)

    @proxy.route('/', defaults={'path': ''})
    @proxy.route('/<path:path>', methods=['GET', 'POST'])
    def _handle(path):
  
        path = '/' + path

        params = re.sub('http.?://' + request.host + '/', '/', request.url)

        if params is not None and params != [] and params[0] == '/' and path != '/':
            parts = config_file['website'].split('/') 
            url = parts[0] + '//' + parts[2]  + params
        else: 
            url = config_file['website'] + params

        # TODO propagate headers 
        headers = {}

        for header in request.headers:
            if header[0] not in ['Host', 'Referer', 'Cookie']:
               headers[header[0]] = header[1]

 
        if request.method == 'GET':
            rsp = requests.get(url, headers = headers)
        else:
            rsp = requests.post(url, headers = headers)


        doc = rsp.text

        doc = _fix_absolute_links(config_file['website'], request.host + '/', doc)

        pipelines = _loadPipelines(config_file, config)

        if pipelines is None:
           return doc

        pipeline = pipelines['default']

        intercepts = pipeline['intercept'].split(',')

        should_filter = None

        for intercept in intercepts:
            if should_filter is None:
                should_filter = re.search(intercept, re.sub('http.?://' + request.host, '', request.url)) is not None
            else:
                should_filter = should_filter or (re.search(intercept, re.sub('http.?://' + request.host, '', request.url)) is not None)

        frankie_context = {}

        if should_filter:
            for patch in pipeline['edits']:
                t = transformations.get(patch['type'], None)

                if t != None:
                   patch['ctx'] = frankie_context
                   doc = t(doc = doc, **patch)

                else:
                    print('Edit "' + patch['type'] + ' not defined.')
                    sys.exit(-1)
 
        frankieResponse = Response(doc)
        
        for header in rsp.headers:
           if header != 'Transfer-Encoding' and header != 'Content-Length' and header != 'Content-Encoding' and header != 'P3P':
               frankieResponse.headers[header] = rsp.headers.get(header) #headers = response.headers

        return frankieResponse

    proxy.run() 

def new(path):
    if os.path.isdir(path):
       print(path + " already exists.")
       return

    print("creating \"" + path + "\"")
    os.makedirs(path)

    path = os.path.abspath(path)

    with open(path + '/config.js', 'w') as config:
        config.write(template)
       

def main():
    app = fire.Fire() 

if __name__ == "__main__":
    main()

